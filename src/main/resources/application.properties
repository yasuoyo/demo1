server.port=9090
#视图层控制 用mvc方式访问templates下的HTML
#spring.mvc.view.prefix=/WEB-INF/views/
#spring.mvc.view.suffix=.jsp
spring.mvc.static-path-pattern=/static/**

Spring.resources.static-locations=classpath:/static/

spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#开发时关闭缓存,不然没法看到实时页面
#spring.thymeleaf.cache=false
#spring.thymeleaf.enabled=false
#thymeleaf这样配置就可以直接访问static下的HTML(和mvc访问方式二选一)
spring.thymeleaf.prefix = classpath:/templates/
spring.thymeleaf.suffix = .html

#spring.datasource.url=jdbc:mysql://10.10.10.239:3306/batch_sit?useUnicode=true&characterEncoding=utf8
#spring.datasource.username=amp_sit
#spring.datasource.password=amp_sit
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#mybatis.typeAliasesPackage=com.example.demo1.pojo

spring.datasource.url=jdbc:mysql://localhost:3307/springboot?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
mybatis.typeAliasesPackage=com.example.demo1.pojo

##指向mapper的xml文件位置
mybatis.mapper-locations=classpath:mapper/*.xml
# will inject 'application' namespace in bootstrap phase
apollo.bootstrap.enabled = true










